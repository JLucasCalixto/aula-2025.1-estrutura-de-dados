#include <stdio.h>   // Para funÃ§Ãµes de entrada/saÃ­da (printf, scanf, fgets)
#include <stdlib.h>  // Para alocaÃ§Ã£o de memÃ³ria dinÃ¢mica (malloc, free)
#include <string.h>  // Para manipulaÃ§Ã£o de strings (strcpy, strcmp, strcspn)
#include <ctype.h>   // Para manipulaÃ§Ã£o de caracteres (tolower, nÃ£o usado diretamente, mas Ãºtil para futuras melhorias)

// Define o tamanho mÃ¡ximo para as strings de entrada, como tÃ­tulos e nomes
#define MAX_STR 100

// Estrutura para representar um usuÃ¡rio na fila de espera por um livro
typedef struct UsuarioFila {
    char nome[MAX_STR];   // Nome do usuÃ¡rio
    char cpf[15];         // CPF do usuÃ¡rio (considerando 11 dÃ­gitos + 2 para pontos/hÃ­fen + 1 para '\0')
    struct UsuarioFila *proximo; // Ponteiro para o prÃ³ximo usuÃ¡rio na fila
} UsuarioFila;

// Estrutura para representar a fila de espera de emprÃ©stimos para um livro especÃ­fico
typedef struct FilaEmprestimo {
    UsuarioFila *frente; // Ponteiro para o primeiro usuÃ¡rio da fila (quem serÃ¡ atendido primeiro)
    UsuarioFila *tras;   // Ponteiro para o Ãºltimo usuÃ¡rio da fila (onde novos usuÃ¡rios sÃ£o adicionados)
} FilaEmprestimo;

// Estrutura para representar um livro
typedef struct Livro {
    char titulo[MAX_STR];          // TÃ­tulo do livro
    char autor[MAX_STR];           // Autor do livro
    char isbn[20];                 // CÃ³digo ISBN do livro
    int quantidadeDisponivel;      // NÃºmero de cÃ³pias disponÃ­veis para emprÃ©stimo
    FilaEmprestimo filaEspera;     // Fila de espera associada a este livro
    struct Livro *proximo;         // Ponteiro para o prÃ³ximo livro na lista encadeada
} Livro;

// Estrutura para representar a lista encadeada de todos os livros na biblioteca
typedef struct ListaLivros {
    Livro *primeiro; // Ponteiro para o primeiro livro da lista
} ListaLivros;

// --- FunÃ§Ãµes Auxiliares para Fila de EmprÃ©stimos ---

/**
 * @brief Inicializa uma fila de emprÃ©stimos, definindo seus ponteiros de frente e trÃ¡s como NULL.
 * @param fila Ponteiro para a estrutura FilaEmprestimo a ser inicializada.
 */
void inicializarFilaEmprestimo(FilaEmprestimo *fila) {
    fila->frente = NULL;
    fila->tras = NULL;
}

/**
 * @brief Adiciona um novo usuÃ¡rio Ã  fila de espera de um livro.
 * @param fila Ponteiro para a FilaEmprestimo onde o usuÃ¡rio serÃ¡ adicionado.
 * @param nome O nome do usuÃ¡rio.
 * @param cpf O CPF do usuÃ¡rio.
 */
void enfileirar(FilaEmprestimo *fila, const char *nome, const char *cpf) {
    UsuarioFila *novoUsuario = (UsuarioFila *)malloc(sizeof(UsuarioFila));
    if (novoUsuario == NULL) {
        printf("Erro de alocaÃ§Ã£o de memÃ³ria para usuÃ¡rio na fila.\n");
        return;
    }
    strcpy(novoUsuario->nome, nome);
    strcpy(novoUsuario->cpf, cpf);
    novoUsuario->proximo = NULL; // O novo usuÃ¡rio Ã© sempre o Ãºltimo, entÃ£o seu prÃ³ximo Ã© NULL

    if (fila->tras == NULL) { // Se a fila estiver vazia, o novo usuÃ¡rio Ã© o primeiro e o Ãºltimo
        fila->frente = novoUsuario;
        fila->tras = novoUsuario;
    } else { // Caso contrÃ¡rio, adiciona o novo usuÃ¡rio ao final da fila
        fila->tras->proximo = novoUsuario;
        fila->tras = novoUsuario;
    }
    printf("UsuÃ¡rio %s adicionado Ã  fila de espera.\n", nome);
}

/**
 * @brief Remove o primeiro usuÃ¡rio da fila de espera de um livro.
 * @param fila Ponteiro para a FilaEmprestimo de onde o usuÃ¡rio serÃ¡ removido.
 * @return Retorna um ponteiro para o UsuarioFila removido, ou NULL se a fila estiver vazia.
 */
UsuarioFila *desenfileirar(FilaEmprestimo *fila) {
    if (fila->frente == NULL) { // Se a fila estiver vazia, nÃ£o hÃ¡ o que remover
        return NULL;
    }
    UsuarioFila *usuarioDesenfileirado = fila->frente; // Pega o primeiro usuÃ¡rio
    fila->frente = fila->frente->proximo; // O prÃ³ximo usuÃ¡rio se torna o novo primeiro
    if (fila->frente == NULL) { // Se a fila ficou vazia apÃ³s a remoÃ§Ã£o, o 'tras' tambÃ©m deve ser NULL
        fila->tras = NULL;
    }
    return usuarioDesenfileirado; // Retorna o usuÃ¡rio que foi removido
}

/**
 * @brief Verifica se uma fila de emprÃ©stimos estÃ¡ vazia.
 * @param fila Ponteiro para a FilaEmprestimo a ser verificada.
 * @return Retorna 1 (verdadeiro) se a fila estiver vazia, 0 (falso) caso contrÃ¡rio.
 */
int filaVazia(FilaEmprestimo *fila) {
    return (fila->frente == NULL);
}

/**
 * @brief Libera toda a memÃ³ria alocada para os usuÃ¡rios em uma fila de emprÃ©stimos.
 * @param fila Ponteiro para a FilaEmprestimo a ser liberada.
 */
void liberarFila(FilaEmprestimo *fila) {
    UsuarioFila *atual = fila->frente;
    UsuarioFila *proximo;
    while (atual != NULL) {
        proximo = atual->proximo; // Salva o prÃ³ximo antes de liberar o atual
        free(atual);             // Libera a memÃ³ria do usuÃ¡rio atual
        atual = proximo;         // Move para o prÃ³ximo usuÃ¡rio
    }
    fila->frente = NULL; // Reseta os ponteiros da fila
    fila->tras = NULL;
}

// --- FunÃ§Ãµes para Lista de Livros ---

/**
 * @brief Inicializa a lista de livros, definindo seu ponteiro 'primeiro' como NULL.
 * @param lista Ponteiro para a estrutura ListaLivros a ser inicializada.
 */
void inicializarListaLivros(ListaLivros *lista) {
    lista->primeiro = NULL;
}

/**
 * @brief Limpa o buffer de entrada (stdin) para evitar problemas com caracteres residuais.
 * Ã‰ Ãºtil apÃ³s o uso de scanf para garantir que o prÃ³ximo fgets leia uma nova linha.
 */
void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

/**
 * @brief Cadastra um novo livro na lista da biblioteca.
 * Solicita ao usuÃ¡rio os detalhes do livro e o adiciona ao final da lista.
 * @param lista Ponteiro para a ListaLivros onde o novo livro serÃ¡ adicionado.
 */
void cadastrarLivro(ListaLivros *lista) {
    Livro *novoLivro = (Livro *)malloc(sizeof(Livro));
    if (novoLivro == NULL) {
        printf("Erro de alocaÃ§Ã£o de memÃ³ria para livro.\n");
        return;
    }

    printf("\n--- Cadastro de Livro ---\n");
    printf("TÃ­tulo: ");
    fgets(novoLivro->titulo, MAX_STR, stdin);
    novoLivro->titulo[strcspn(novoLivro->titulo, "\n")] = 0; // Remove o caractere de nova linha

    printf("Autor: ");
    fgets(novoLivro->autor, MAX_STR, stdin);
    novoLivro->autor[strcspn(novoLivro->autor, "\n")] = 0; // Remove o caractere de nova linha

    printf("ISBN: ");
    fgets(novoLivro->isbn, 20, stdin);
    novoLivro->isbn[strcspn(novoLivro->isbn, "\n")] = 0; // Remove o caractere de nova linha

    printf("Quantidade DisponÃ­vel: ");
    scanf("%d", &novoLivro->quantidadeDisponivel);
    limparBuffer(); // Limpa o buffer apÃ³s scanf

    inicializarFilaEmprestimo(&novoLivro->filaEspera); // Inicializa a fila de espera para o novo livro
    novoLivro->proximo = NULL; // O novo livro Ã© adicionado ao final, entÃ£o seu prÃ³ximo Ã© NULL

    if (lista->primeiro == NULL) { // Se a lista estiver vazia, o novo livro Ã© o primeiro
        lista->primeiro = novoLivro;
    } else { // Caso contrÃ¡rio, percorre a lista atÃ© o final e adiciona o novo livro
        Livro *atual = lista->primeiro;
        while (atual->proximo != NULL) {
            atual = atual->proximo;
        }
        atual->proximo = novoLivro;
    }
    printf("Livro \"%s\" cadastrado com sucesso!\n", novoLivro->titulo);
}

/**
 * @brief Remove um livro da lista da biblioteca.
 * O livro sÃ³ pode ser removido se nÃ£o houver usuÃ¡rios na sua fila de espera.
 * @param lista Ponteiro para a ListaLivros de onde o livro serÃ¡ removido.
 */
void removerLivro(ListaLivros *lista) {
    char tituloBusca[MAX_STR];
    printf("\n--- Remover Livro ---\n");
    printf("Digite o tÃ­tulo do livro a ser removido: ");
    fgets(tituloBusca, MAX_STR, stdin);
    tituloBusca[strcspn(tituloBusca, "\n")] = 0; // Remove o caractere de nova linha

    Livro *atual = lista->primeiro;
    Livro *anterior = NULL;

    // Percorre a lista para encontrar o livro
    while (atual != NULL && strcmp(atual->titulo, tituloBusca) != 0) {
        anterior = atual;
        atual = atual->proximo;
    }

    if (atual == NULL) { // Livro nÃ£o encontrado
        printf("Livro \"%s\" nÃ£o encontrado.\n", tituloBusca);
        return;
    }

    // Verifica se hÃ¡ usuÃ¡rios na fila de espera antes de remover
    if (!filaVazia(&atual->filaEspera)) {
        printf("NÃ£o Ã© possÃ­vel remover o livro \"%s\" pois hÃ¡ usuÃ¡rios na fila de espera.\n", atual->titulo);
        return;
    }

    if (anterior == NULL) { // Se o livro a ser removido Ã© o primeiro da lista
        lista->primeiro = atual->proximo;
    } else { // Se o livro a ser removido estÃ¡ no meio ou no final da lista
        anterior->proximo = atual->proximo;
    }

    liberarFila(&atual->filaEspera); // Libera a memÃ³ria da fila de espera do livro
    printf("Livro \"%s\" removido com sucesso.\n", atual->titulo);
    free(atual); // Libera a memÃ³ria do nÃ³ do livro
}

/**
 * @brief Lista todos os livros cadastrados na biblioteca, incluindo suas filas de espera.
 * @param lista Ponteiro para a ListaLivros a ser listada.
 */
void listarTodosLivros(ListaLivros *lista) {
    if (lista->primeiro == NULL) {
        printf("\nNenhum livro cadastrado.\n");
        return;
    }

    printf("\n--- Livros Cadastrados ---\n");
    Livro *atual = lista->primeiro;
    while (atual != NULL) {
        printf("TÃ­tulo: %s\n", atual->titulo);
        printf("Autor: %s\n", atual->autor);
        printf("ISBN: %s\n", atual->isbn);
        printf("Quantidade DisponÃ­vel: %d\n", atual->quantidadeDisponivel);
        if (!filaVazia(&atual->filaEspera)) {
            printf("Fila de Espera:\n");
            UsuarioFila *userAtual = atual->filaEspera.frente;
            while (userAtual != NULL) {
                printf("  - Nome: %s, CPF: %s\n", userAtual->nome, userAtual->cpf);
                userAtual = userAtual->proximo;
            }
        } else {
            printf("Fila de Espera: Vazia\n");
        }
        printf("--------------------------\n");
        atual = atual->proximo;
    }
}

/**
 * @brief Solicita um emprÃ©stimo de um livro.
 * Se o livro estiver disponÃ­vel, a quantidade Ã© decrementada.
 * Caso contrÃ¡rio, o usuÃ¡rio Ã© adicionado Ã  fila de espera do livro.
 * @param lista Ponteiro para a ListaLivros onde o livro serÃ¡ buscado.
 */
void solicitarEmprestimo(ListaLivros *lista) {
    char tituloBusca[MAX_STR];
    char nomeUsuario[MAX_STR];
    char cpfUsuario[15];

    printf("\n--- Solicitar EmprÃ©stimo ---\n");
    printf("Digite o tÃ­tulo do livro para emprÃ©stimo: ");
    fgets(tituloBusca, MAX_STR, stdin);
    tituloBusca[strcspn(tituloBusca, "\n")] = 0; // Remove o caractere de nova linha

    Livro *livroEncontrado = NULL;
    Livro *atual = lista->primeiro;
    // Busca o livro na lista
    while (atual != NULL) {
        if (strcmp(atual->titulo, tituloBusca) == 0) {
            livroEncontrado = atual;
            break;
        }
        atual = atual->proximo;
    }

    if (livroEncontrado == NULL) {
        printf("Livro \"%s\" nÃ£o encontrado.\n", tituloBusca);
        return;
    }

    printf("Nome do usuÃ¡rio: ");
    fgets(nomeUsuario, MAX_STR, stdin);
    nomeUsuario[strcspn(nomeUsuario, "\n")] = 0; // Remove o caractere de nova linha

    printf("CPF do usuÃ¡rio: ");
    fgets(cpfUsuario, 15, stdin);
    cpfUsuario[strcspn(cpfUsuario, "\n")] = 0; // Remove o caractere de nova linha

    if (livroEncontrado->quantidadeDisponivel > 0) {
        livroEncontrado->quantidadeDisponivel--; // Decrementa a quantidade disponÃ­vel
        printf("EmprÃ©stimo de \"%s\" realizado com sucesso para %s.\n", livroEncontrado->titulo, nomeUsuario);
    } else {
        // Se nÃ£o houver cÃ³pias disponÃ­veis, adiciona o usuÃ¡rio Ã  fila de espera
        enfileirar(&livroEncontrado->filaEspera, nomeUsuario, cpfUsuario);
        printf("Livro \"%s\" indisponÃ­vel. %s adicionado Ã  fila de espera.\n", livroEncontrado->titulo, nomeUsuario);
    }
}

/**
 * @brief Libera um emprÃ©stimo de um livro.
 * Se houver usuÃ¡rios na fila de espera, o primeiro Ã© atendido e a quantidade disponÃ­vel aumenta.
 * Caso contrÃ¡rio, apenas a quantidade disponÃ­vel Ã© incrementada.
 * @param lista Ponteiro para a ListaLivros onde o livro serÃ¡ buscado.
 */
void liberarEmprestimo(ListaLivros *lista) {
    char tituloBusca[MAX_STR];
    printf("\n--- Liberar EmprÃ©stimo ---\n");
    printf("Digite o tÃ­tulo do livro para liberar emprÃ©stimo: ");
    fgets(tituloBusca, MAX_STR, stdin);
    tituloBusca[strcspn(tituloBusca, "\n")] = 0; // Remove o caractere de nova linha

    Livro *livroEncontrado = NULL;
    Livro *atual = lista->primeiro;
    // Busca o livro na lista
    while (atual != NULL) {
        if (strcmp(atual->titulo, tituloBusca) == 0) {
            livroEncontrado = atual;
            break;
        }
        atual = atual->proximo;
    }

    if (livroEncontrado == NULL) {
        printf("Livro \"%s\" nÃ£o encontrado.\n", tituloBusca);
        return;
    }

    if (!filaVazia(&livroEncontrado->filaEspera)) {
        // Se hÃ¡ alguÃ©m na fila, atende o primeiro e incrementa a quantidade disponÃ­vel
        UsuarioFila *usuarioAtendido = desenfileirar(&livroEncontrado->filaEspera);
        if (usuarioAtendido != NULL) {
            livroEncontrado->quantidadeDisponivel++;
            printf("EmprÃ©stimo de \"%s\" liberado. UsuÃ¡rio %s (CPF: %s) atendido da fila de espera.\n",
                   livroEncontrado->titulo, usuarioAtendido->nome, usuarioAtendido->cpf);
            free(usuarioAtendido); // Libera a memÃ³ria do usuÃ¡rio que foi atendido
        }
    } else {
        // Se nÃ£o hÃ¡ ninguÃ©m na fila, apenas incrementa a quantidade disponÃ­vel
        livroEncontrado->quantidadeDisponivel++;
        printf("EmprÃ©stimo de \"%s\" liberado. NinguÃ©m na fila de espera.\n", livroEncontrado->titulo);
    }
}

/**
 * @brief Busca um livro na lista por seu tÃ­tulo e exibe seus detalhes.
 * @param lista Ponteiro para a ListaLivros onde o livro serÃ¡ buscado.
 */
void buscarLivroPorTitulo(ListaLivros *lista) {
    char tituloBusca[MAX_STR];
    printf("\n--- Buscar Livro por TÃ­tulo ---\n");
    printf("Digite o tÃ­tulo do livro a ser buscado: ");
    fgets(tituloBusca, MAX_STR, stdin);
    tituloBusca[strcspn(tituloBusca, "\n")] = 0; // Remove o caractere de nova linha

    Livro *livroEncontrado = NULL;
    Livro *atual = lista->primeiro;
    // Percorre a lista para encontrar o livro
    while (atual != NULL) {
        if (strcmp(atual->titulo, tituloBusca) == 0) {
            livroEncontrado = atual;
            break;
        }
        atual = atual->proximo;
    }

    if (livroEncontrado == NULL) {
        printf("Livro \"%s\" nÃ£o encontrado.\n", tituloBusca);
    } else {
        printf("\n--- Livro Encontrado ---\n");
        printf("TÃ­tulo: %s\n", livroEncontrado->titulo);
        printf("Autor: %s\n", livroEncontrado->autor);
        printf("ISBN: %s\n", livroEncontrado->isbn);
        printf("Quantidade DisponÃ­vel: %d\n", livroEncontrado->quantidadeDisponivel);
        if (!filaVazia(&livroEncontrado->filaEspera)) {
            printf("Fila de Espera:\n");
            UsuarioFila *userAtual = livroEncontrado->filaEspera.frente;
            while (userAtual != NULL) {
                printf("  - Nome: %s, CPF: %s\n", userAtual->nome, userAtual->cpf);
                userAtual = userAtual->proximo;
            }
        } else {
            printf("Fila de Espera: Vazia\n");
        }
        printf("--------------------------\n");
    }
}

/**
 * @brief Troca o conteÃºdo de dois nÃ³s de livro.
 * Esta funÃ§Ã£o Ã© usada internamente pela funÃ§Ã£o de ordenaÃ§Ã£o.
 * @param a Ponteiro para o primeiro nÃ³ de livro.
 * @param b Ponteiro para o segundo nÃ³ de livro.
 */
void trocarLivros(Livro *a, Livro *b) {
    // VariÃ¡veis temporÃ¡rias para armazenar os dados de 'a'
    char tempTitulo[MAX_STR];
    char tempAutor[MAX_STR];
    char tempISBN[20];
    int tempQuantidade;
    FilaEmprestimo tempFila; // A estrutura da fila Ã© copiada (ponteiros frente/tras)

    // Salva os dados de 'a' em variÃ¡veis temporÃ¡rias
    strcpy(tempTitulo, a->titulo);
    strcpy(tempAutor, a->autor);
    strcpy(tempISBN, a->isbn);
    tempQuantidade = a->quantidadeDisponivel;
    tempFila = a->filaEspera;

    // Copia os dados de 'b' para 'a'
    strcpy(a->titulo, b->titulo);
    strcpy(a->autor, b->autor);
    strcpy(a->isbn, b->isbn);
    a->quantidadeDisponivel = b->quantidadeDisponivel;
    a->filaEspera = b->filaEspera;

    // Copia os dados temporÃ¡rios (originais de 'a') para 'b'
    strcpy(b->titulo, tempTitulo);
    strcpy(b->autor, tempAutor);
    strcpy(b->isbn, tempISBN);
    b->quantidadeDisponivel = tempQuantidade;
    b->filaEspera = tempFila;
}

/**
 * @brief Ordena os livros na lista por tÃ­tulo ou autor usando o algoritmo Bubble Sort.
 * Nota: Para listas encadeadas, a troca de dados dos nÃ³s Ã© mais simples que a troca de ponteiros.
 * @param lista Ponteiro para a ListaLivros a ser ordenada.
 * @param tipoOrdenacao Um inteiro que indica o critÃ©rio de ordenaÃ§Ã£o:
 * 1 para ordenar por TÃ­tulo.
 * 2 para ordenar por Autor.
 */
void ordenarLivros(ListaLivros *lista, int tipoOrdenacao) {
    if (lista->primeiro == NULL || lista->primeiro->proximo == NULL) {
        printf("\nNÃ£o hÃ¡ livros suficientes para ordenar.\n");
        return;
    }

    int trocado;
    Livro *ptr1;
    Livro *lptr = NULL; // Ponteiro para o Ãºltimo elemento jÃ¡ ordenado

    // Loop principal do Bubble Sort
    do {
        trocado = 0;
        ptr1 = lista->primeiro; // ComeÃ§a do inÃ­cio da lista

        // Percorre a lista atÃ© o penÃºltimo elemento nÃ£o ordenado
        while (ptr1->proximo != lptr) {
            int comparacao = 0;
            if (tipoOrdenacao == 1) { // Ordenar por tÃ­tulo
                comparacao = strcmp(ptr1->titulo, ptr1->proximo->titulo);
            } else if (tipoOrdenacao == 2) { // Ordenar por autor
                comparacao = strcmp(ptr1->autor, ptr1->proximo->autor);
            }

            if (comparacao > 0) { // Se os elementos estÃ£o fora de ordem, troca-os
                trocarLivros(ptr1, ptr1->proximo); // Troca o conteÃºdo dos nÃ³s
                trocado = 1; // Indica que uma troca ocorreu
            }
            ptr1 = ptr1->proximo; // Move para o prÃ³ximo elemento
        }
        lptr = ptr1; // O Ãºltimo elemento percorrido jÃ¡ estÃ¡ na sua posiÃ§Ã£o final
    } while (trocado); // Continua enquanto houverem trocas (indicando que a lista nÃ£o estÃ¡ totalmente ordenada)

    printf("\nLivros ordenados com sucesso por %s.\n", (tipoOrdenacao == 1) ? "TÃ­tulo" : "Autor");
}

/**
 * @brief Libera toda a memÃ³ria alocada dinamicamente para a lista de livros e suas filas de espera.
 * @param lista Ponteiro para a ListaLivros a ser liberada.
 */
void liberarMemoria(ListaLivros *lista) {
    Livro *atual = lista->primeiro;
    Livro *proximo;
    while (atual != NULL) {
        proximo = atual->proximo;        // Salva o prÃ³ximo antes de liberar o atual
        liberarFila(&atual->filaEspera); // Libera a fila de espera associada a este livro
        free(atual);                     // Libera a memÃ³ria do nÃ³ do livro
        atual = proximo;                 // Move para o prÃ³ximo livro
    }
    lista->primeiro = NULL; // Garante que a lista esteja vazia apÃ³s a liberaÃ§Ã£o
    printf("\nMemÃ³ria liberada com sucesso.\n");
}

/**
 * @brief Exibe o menu principal do sistema e gerencia as interaÃ§Ãµes do usuÃ¡rio.
 */
void menu() {
    ListaLivros minhaBiblioteca;
    inicializarListaLivros(&minhaBiblioteca); // Inicializa a lista de livros vazia

    int escolha;
    do {
        printf("\n--- Sistema de Controle de Biblioteca AcadÃªmica ---\n");
        printf("1. Cadastrar Livro\n");
        printf("2. Remover Livro\n");
        printf("3. Listar Todos os Livros\n");
        printf("4. Solicitar EmprÃ©stimo\n");
        printf("5. Liberar EmprÃ©stimo\n");
        printf("6. Buscar Livro por TÃ­tulo\n");
        pri
